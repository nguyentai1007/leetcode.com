You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
Hint: 
This is a typical dp question, for the later questions rely on the former results.
	For example, when we need go to the 3th flord, we need get 1th or 2th firstly. 
	So the state transform function is : 
	
	dp[i] = dp[i-1] + dp[i-2]  when i>=3;
	      = i                  when i <3;
	What need to do now is to solve the Fibonacci sequence, which has kinds of way to do. 
	The fibonacci sequence can be done with recursion or not, and with memo or not, even including the prun the redundant data,
      which identify the data that we do not need anymore. 
	Displayed below is the three design, the recursion one will be TLE for wasting too much time on solving repeated questions.
  
C#
public class Solution {
    public int ClimbStairs(int n) {
        int a = 1, b = 1;
		for (int i = 2; i <= n; i++) {
			b = a + b;
			a = b - a;
		}
		return b;
    }
}
