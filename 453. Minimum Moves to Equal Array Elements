Given a non-empty integer array of size n, find the minimum number of moves required to make all array elements equal, where a move is incrementing n - 1 elements by 1.

Example:

Input:
[1,2,3]

Output:
3

Explanation:
Only three moves are needed (remember each move increments two elements):

[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]

Noted:
        # sum = sum of all items in nums
        # m   = number of moves
        # x   = value of all items in nums after m moves
        # n   = number of items in nums
        # x*n = sum of all items after m moves
        # each move add (n-1) to sum
        # so m moves add m*(n-1) to sum
        # so x*n = sum + m*(n - 1) ............. (1)
        
        # smallest is smallest number in nums before moves, after m moves, m got added to it and it became x
        # smallest + m = x  ............... (2)
        
        # smallest * n + m*n = sum + m*n - m.................using (1) and (2)
        # smallest * n       = sum - m ............ m*n cancel on both side
        # m  = sum - smallest * n .......... m (final desired result)
        
C#
public class Solution {
    public int MinMoves(int[] nums) {
        int n = nums.Length;
        int min = nums.Min();
        int m = 0;
        m = nums.Sum() - ( min * n);
        return m;
    }
}
