Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.

Note:
The given integer is guaranteed to fit within the range of a 32-bit signed integer.
You could assume no leading zero bit in the integerâ€™s binary representation.
Example 1:
Input: 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
Example 2:
Input: 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.

int findComplement(int num) {    
    return convertN(convertBF(num));
}
int convertBF(int num){
    int a,b = 0 , i = 1;
    while(num != 0){
        a = 0;
        if (num%2==0)
            a = 1;
        num /= 2;
        b += a*i;
        i *= 10;
    }
    return b;
}
int convertN(int num){
    int d = 0, i = 0, a;    
    while(num != 0){
        a = num%10;
        num /=10;
        d += a * pow(2,i);
        ++i;
    }
    return d;
}
