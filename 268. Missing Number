Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

Example 1:

Input: [3,0,1]
Output: 2
Example 2:

Input: [9,6,4,2,3,5,7,0,1]
Output: 8
Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?

C#
public class Solution {
    public int MissingNumber(int[] nums) {
  int[] a = new int[nums.Length];
            Array.Copy(nums, a, nums.Length);
            Array.Sort(a);
            int len = a.Length;
            for (int i = 0; i < len; i++)
            {
                if (i != a[i])
                    return i;
                if (i == a[len - 1])
                    return i + 1;
            }  
            return -1;
    }
}

#  Tham khao them
# cong thuc tinh sum[1..n] = (n * (n + 1)) / 2;  
public class Solution {
    public int MissingNumber(int[] nums) {        
        if (nums == null)
        {
            return 0;
        }        
        var n = nums.Length;
        var expected = (n * (n + 1)) / 2;        
        var actual = 0;        
        for (int i = 0; i < nums.Length; i++)
        {
            actual += nums[i];
        }        
        return expected - actual;
    }
}
